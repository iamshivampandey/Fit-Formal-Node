const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { validationMiddleware } = require('../middleware/validationMiddleware');
const { authenticateToken } = require('../middleware/authMiddleware');
const databaseService = require('../services/databaseService');
const router = express.Router();

// Database storage - no in-memory storage needed

// Signup API endpoint with reusable validation (with password)
router.post('/signup', validationMiddleware.validateUserRegistration, async (req, res) => {
  try {
    console.log('🔄 Signup request received:', req.body);
    const { email, password, firstName, lastName, phoneNumber, roleName } = req.body;

    // Default to 'Customer' if roleName is not provided
    const roleNameToUse = roleName || 'Customer';
    console.log('🔄 Role to assign:', roleNameToUse);

    // Get role by name
    console.log('🔄 Looking up role:', roleNameToUse);
    let role;
    try {
      role = await databaseService.db.GetRoleByName(roleNameToUse);
      if (!role) {
        console.log('❌ Invalid role name:', roleNameToUse);
        return res.status(400).json({
          success: false,
          message: `Invalid role name: ${roleNameToUse}. Valid roles are: Admin, Customer, Seller, Tailor, Taylorseller`
        });
      }
      console.log('✅ Role found:', role);
    } catch (error) {
      console.error('❌ Error fetching role:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to fetch role information',
        error: process.env.NODE_ENV === 'development' ? (error.message || error.toString()) : undefined
      });
    }

    // Check if user already exists in database
    try {
      console.log('🔄 Checking if user already exists in database...');
      const existingUser = await databaseService.db.GetUserByEmail({ Email: email });
      if (existingUser && Array.isArray(existingUser) && existingUser.length > 0) {
        console.log('❌ User already exists:', email);
        return res.status(409).json({
          success: false,
          message: 'User with this email already exists'
        });
      }
      console.log('✅ User does not exist, proceeding with signup');
    } catch (error) {
      console.log('⚠️ Error checking existing user:', error);
      // Continue with signup if we can't check (database might be down)
    }

    // Hash the password
    console.log('🔄 Hashing password...');
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);
    console.log('✅ Password hashed successfully');

    // Create new user object (with password and without id - will be auto-generated by database)
    const newUser = {
      email,
      password: hashedPassword,
      firstName,
      lastName,
      phoneNumber: phoneNumber || null,
      createdAt: new Date().toISOString(),
      modifiedAt: new Date().toISOString(),
      isActive: true
    };

    // Save user to database using database service
    let userId;
    try {
      console.log('🔄 Saving user to database using database service...');
      const result = await databaseService.db.InsertUser(newUser);
      console.log('✅ User saved to database successfully');
      console.log('📊 Database result:', result);
      
      // Get the inserted user ID from the result
      if (result && result.recordset && result.recordset.length > 0) {
        userId = result.recordset[0].id;
        console.log('✅ User ID retrieved:', userId);
      } else {
        throw new Error('Failed to retrieve user ID after insertion');
      }
    } catch (error) {
      console.error('❌ Error saving user to database:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to save user to database',
        error: process.env.NODE_ENV === 'development' ? (error.message || error.toString()) : undefined
      });
    }

    // Insert user-role mapping
    try {
      console.log('🔄 Assigning role to user...');
      await databaseService.db.InsertUserRole(userId, role.id);
      console.log('✅ Role assigned successfully');
    } catch (error) {
      console.error('❌ Error assigning role to user:', error);
      return res.status(500).json({
        success: false,
        message: 'User created but failed to assign role',
        error: process.env.NODE_ENV === 'development' ? (error.message || error.toString()) : undefined
      });
    }

    // Remove password from response
    const { password: _, ...userResponse } = newUser;

    console.log('🎉 User created successfully:', userResponse.email);
    res.status(201).json({
      success: true,
      message: 'User created successfully',
      data: {
        user: userResponse,
        role: {
          id: role.id,
          name: role.role_name,
          description: role.description
        }
      }
    });

  } catch (error) {
    console.error('❌ Signup error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error during signup',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Simple signup endpoint for testing (without validation but with password)
router.post('/signup-simple', async (req, res) => {
  try {
    console.log('🔄 Simple signup request received:', req.body);
    const { email, password, firstName, lastName, phoneNumber } = req.body;
    
    // Basic validation
    if (!email || !password || !firstName || !lastName) {
      return res.status(400).json({
        success: false,
        message: 'Missing required fields: email, password, firstName, lastName'
      });
    }

    // Check if user already exists
    const existingUser = users.find(user => user.email === email);
    if (existingUser) {
      return res.status(409).json({
        success: false,
        message: 'User with this email already exists'
      });
    }

    // Hash the password
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Create new user object (with password and without id - will be auto-generated by database)
    const newUser = {
      email,
      password: hashedPassword,
      firstName,
      lastName,
      phoneNumber: phoneNumber || null,
      createdAt: new Date().toISOString(),
      modifiedAt: new Date().toISOString(),
      isActive: true
    };

    // Save user to database using database service
    try {
      console.log('🔄 Saving user to database using database service (simple)...');
      const result = await databaseService.db.InsertUser(newUser);
      console.log('✅ User saved to database successfully (simple)');
      console.log('📊 Database result:', result);
    } catch (error) {
      console.error('❌ Error saving user to database (simple):', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to save user to database',
        error: process.env.NODE_ENV === 'development' ? (error.message || error.toString()) : undefined
      });
    }

    // Also add to in-memory storage for backward compatibility
    users.push(newUser);
    console.log('✅ User added to in-memory storage (simple)');

    // Remove password from response
    const { password: _, ...userResponse } = newUser;

    res.status(201).json({
      success: true,
      message: 'User created successfully (simple endpoint)',
      data: {
        user: userResponse
      }
    });

  } catch (error) {
    console.error('❌ Simple signup error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error during signup',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Login API endpoint with JWT token generation
router.post('/login', validationMiddleware.validateUserLogin, async (req, res) => {
  try {
    console.log('🔄 Login request received:', req.body.email);
    const { email, password } = req.body;

    // Find user by email in database
    console.log('🔄 Searching for user in database...');
    const users = await databaseService.db.GetUserByEmail({ Email: email });
    if (!users || users.length === 0) {
      console.log('❌ User not found:', email);
      return res.status(401).json({
        success: false,
        message: 'Invalid email or password'
      });
    }

    const user = users[0];
    console.log('✅ User found in database');

    // Check if user is active
    if (!user.isActive) {
      console.log('❌ User account deactivated:', email);
      return res.status(401).json({
        success: false,
        message: 'Account is deactivated'
      });
    }

    // Verify password
    console.log('🔄 Verifying password...');
    console.log('📋 Password from request:', password ? 'provided' : 'missing');
    console.log('📋 Hashed password from DB:', user.password ? 'exists' : 'missing');
    
    if (!password || !user.password) {
      console.log('❌ Missing password data');
      return res.status(401).json({
        success: false,
        message: 'Invalid email or password'
      });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      console.log('❌ Invalid password for user:', email);
      return res.status(401).json({
        success: false,
        message: 'Invalid email or password'
      });
    }

    // Generate JWT token
    console.log('🔄 Generating JWT token...');
    const tokenPayload = {
      userId: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName
    };

    const token = jwt.sign(
      tokenPayload,
      process.env.JWT_SECRET,
      { 
        expiresIn: '24h', // Token expires in 24 hours
        issuer: 'your-app-name',
        audience: 'your-app-users'
      }
    );

    console.log('✅ JWT token generated successfully');

    // Remove password from response
    const { password: _, ...userResponse } = user;

    console.log('✅ Login successful for user:', email);
    res.json({
      success: true,
      message: 'Login successful',
      data: {
        user: userResponse,
        token: token,
        expiresIn: '24h'
      }
    });

  } catch (error) {
    console.error('❌ Login error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error during login',
      error: process.env.NODE_ENV === 'development' ? (error.message || error.toString()) : undefined
    });
  }
});

// Get all users from database (Protected route - requires authentication)
router.get('/users', authenticateToken, async (req, res) => {
  try {
    console.log('🔄 Retrieving all users from database...');
    
    // Get all users using database service
    const result = await databaseService.db.SelectUsers();
    
    console.log('✅ Users retrieved from database successfully');
    console.log('📊 Database result:', result);
    
    res.json({
      success: true,
      data: {
        users: result,
        count: result.length
      }
    });
  } catch (error) {
    console.error('❌ Get users error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Get user by email (since we removed id field)
router.get('/user/:email', (req, res) => {
  try {
    const { email } = req.params;
    console.log('🔄 Getting user by email:', email);
    
    const user = users.find(u => u.email === email);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // User response (no password to remove)
    const userResponse = user;

    res.json({
      success: true,
      data: {
        user: userResponse
      }
    });

  } catch (error) {
    console.error('❌ Get user error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Protected route - Get current user profile (requires authentication)
router.get('/profile', authenticateToken, async (req, res) => {
  try {
    console.log('🔄 Getting user profile for:', req.user.email);
    
    // Get user from database
    const users = await databaseService.db.GetUserByEmail({ Email: req.user.email });
    if (!users || users.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    const user = users[0];
    
    // Remove password from response
    const { password: _, ...userResponse } = user;

    res.json({
      success: true,
      message: 'Profile retrieved successfully',
      data: {
        user: userResponse
      }
    });

  } catch (error) {
    console.error('❌ Get profile error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? (error.message || error.toString()) : undefined
    });
  }
});

// Protected route - Update user profile (requires authentication)
router.put('/profile', authenticateToken, validationMiddleware.validateUserUpdate, async (req, res) => {
  try {
    console.log('🔄 Updating user profile for:', req.user.email);
    const { firstName, lastName, phoneNumber } = req.body;

    // Update user in database
    const updateData = {
      firstName,
      lastName,
      phoneNumber: phoneNumber || null,
      modifiedAt: new Date().toISOString()
    };

    const result = await databaseService.db.UpdateUser(req.user.userId, updateData);
    
    console.log('✅ Profile updated successfully');

    res.json({
      success: true,
      message: 'Profile updated successfully',
      data: {
        updatedFields: updateData
      }
    });

  } catch (error) {
    console.error('❌ Update profile error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? (error.message || error.toString()) : undefined
    });
  }
});

module.exports = router;
